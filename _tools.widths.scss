// ==========================================================================
// TOOLS / WIDTHS
// ========================================================================== */

// This fairly complex looking mixin will generate our entire project’s grid
// system classes in one go. You shouldn’t need to know the full ins-and-outs of
// what is going on below; all you really need to know is that we end up with a
// suite of classes like:
//
// .u-width-1/2         -- 50% width
// .u-width-3/4@medium  -- 75% width on medium-and-up screens
// .u-push-2/3          -- Push an item over to the right by 66.666%
// .u-pull-1/2@large    -- Pull an item back to the left by 50%
//
// There can be (m)any permutations of the above: experiment!
//
// If you would like to know more, the mixin is relatively well commented.
//
// - - -
//
// To create a non-responsive 12 column grid system, simply call:
//
//   @include supercell(12);
//
// To create a 3 and 4 column grid system on medium sized screens:
//
//   @media screen and (min-width: 720px) {
//     @include supercell(3 4, \@medium);
//   }
//
// To create a 1, 2, 3 and 4 column grid system on large sized screens:
//
//   @media screen and (min-width: 1024px) {
//     @include supercell(1 2 3 4, \@large);
//   }
//
// Basically, we just call the mixin again but inside of a breakpoint of our
// choosing, and with the additional responsive suffix (e.g. `\@large`).

@mixin supercell($columns, $breakpoint: null) {

  // Loop through the number of columns for each denominator of our fractions.
  @each $denominator in $columns {

    // Sanity check number of columns
    @if ($denominator > 24) {
      @error "Please choose a more sensible number of columns (less than 25)";
    }

    // Begin creating a numerator for our fraction up until we hit the
    // denominator.
    @for $numerator from 1 through $denominator {

      // Build a class in the format `.u-width-3/4[@<breakpoint>]`.
      .u-width-#{$numerator}\/#{$denominator}#{$breakpoint} {
        width: ($numerator / $denominator) * 100% !important;
      }

      /**
       * 1. Defensively reset any leftover or conflicting `left`/`right` values.
       */

      // Build a class in the format `.u-push-1/2[@<breakpoint>]`.
      .u-push-#{$numerator}\/#{$denominator}#{$breakpoint} {
        position: relative;
        right: auto; /* [1] */
        left: ($numerator / $denominator) * 100% !important;
      }

      // Build a class in the format `.u-pull-5/6[@<breakpoint>]`.
      .u-pull-#{$numerator}\/#{$denominator}#{$breakpoint} {
        position: relative;
        right: ($numerator / $denominator) * 100% !important;
        left: auto; /* [1] */
      }

    }

  }

}

// In order to support the legacy `widths()` mixin, let’s create a simple
// wrapper around the new `supercell()` mixin. This allows developers to use the
// older Supercell API. This will be removed in 2.0.0.
@mixin widths($args...) {
  @include supercell($args...);

  @warn "Support for `widths()` will be removed in Supercell @2.0.0. Use `supercell()` instead."
}
