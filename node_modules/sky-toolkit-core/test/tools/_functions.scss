// =============================================================================
// TEST / TOOLS / FUNCTIONS
// =============================================================================

@import "../../tools/functions";
@import "../../settings/globals";

// Test configuration
// ===========================================

@mixin functions_before() {
  $text: (
    testkey: (
      small: 18px,
      large: 20px
    )
  ) !global;

  $gradients: (
    testkey: (
      end: #000,
      mid: #fff
    )
  ) !global;

  $colors: (
    testColor: #bada55
  ) !global;
}

// $text map reader
// ===========================================

// Function to get text instead of using `map-get`.
@function text($key, $variant:large) {
  @if map-has-key($text, $key) {
    @if ($variant != null) {
      @return map-get(map-get($text, $key), $variant);
    }

    @return map-get($text, $key);
  }

  @warn "Unknown `#{$key}` in $text.";
  @return null;
}

// $text map reader
// ===========================================

@include test-module("@function text") {
  @include functions_before();

  @include test("should return a large size value for given key") {
    $actual: text("testkey", large);
    $expected: 20px;

    @include assert-equal($actual, $expected);
  }

  @include test("should return a small size value for given key") {
    $actual: text("testkey", small);
    $expected: 18px;

    @include assert-equal($actual, $expected);
  }

  @include test("should return a large size value if no variant is provided") {
    $actual: text("testkey");
    $expected: 20px;

    @include assert-equal($actual, $expected);
  }
}

// $gradients map reader
// ===========================================

@include test-module("@function gradient") {
  @include functions_before();

  @include test("should return an end hex value for given key") {
    $actual: gradient("testkey", end);
    $expected: #000;

    @include assert-equal($actual, $expected);
  }

  @include test("should return a mid hex value for given key") {
    $actual: gradient("testkey", mid);
    $expected: #fff;

    @include assert-equal($actual, $expected);
  }

  @include test("should return an end hex if no variant is provided") {
    $actual: gradient("testkey");
    $expected: #000;

    @include assert-equal($actual, $expected);
  }
}

// $colors map reader
// ===========================================

@include test-module("@function color") {
  @include functions_before();

  @include test("should return a hex value for given key") {
    $actual: color("testColor");
    $expected: #bada55;

    @include assert-equal($actual, $expected);
  }
}

// $strip-unit
// ===========================================

@include test-module("@function strip-unit") {
  @include functions_before();

  @include test("returns a number with no units when a number with units is supplied.") {
    $actual: strip-unit(20vw);
    $expected: 20;

    @include assert-equal($actual, $expected);
  }

  @include test("returns a number with no units when a number with no units is supplied.") {
    $actual: strip-unit(400);
    $expected: 400;

    @include assert-equal($actual, $expected);
  }
}

// $strip-unit
// ===========================================

@include test-module("@function convert-to-em") {
  @include functions_before();

  @include test("returns an em value when pixels are supplied.") {
    $actual: convert-to-em(30px);
    $expected: 1.5em;

    @include assert-equal($actual, $expected);
  }

  @include test("returns a number with no units when a number with no units is supplied.") {
    $actual: convert-to-em(2rem);
    $expected: 2em;

    @include assert-equal($actual, $expected);
  }

  @include test("returns the correct value when different base font size is set.") {
    $actual: convert-to-em(20px, 10px);
    $expected: 2em;

    @include assert-equal($actual, $expected);
  }
}
