// =============================================================================
// TOOLS / GRADIENTS
// =============================================================================

// Background Gradient generator
// ===========================================

// Mixin to generate complete background gradients. Uses values from our map in
// `settings/_colors.scss`.
//
// Example usage:
//
//   html {
//     @include background-gradient(sky-sports, horizontal-invert, 0% 50%);
//   }
//
// OPTIONS
// - key: Name of gradient (see toolkit-core/settings/_colors.scss)
// - direction:
//    - "vertical" Vertical 2 point gradient
//    - "horizontal" Horizontal 3 point gradient
//    - "radial" Radial 2 point gradient

@mixin background-gradient($key, $direction:"vertical", $start-stop:0% 100%) {
  @if map-has-key($gradients, $key) {

    // Set values from $gradients variable map to local variables
    $startColor: gradient($key, start);
    $endColor: gradient($key, end);

    $startPoint: nth($start-stop, 1);
    $endPoint: nth($start-stop, 2);

    // The direction map stores values for the direction for both prefixed and
    // standard linear-gradient

    $direction-map: (
      vertical: (
        legacy: "top",
        standard: "to bottom",
        type: linear
      ),
      vertical-invert: (
        legacy: "bottom",
        standard: "to top",
        type: linear
      ),
      horizontal: (
        legacy: "left",
        standard: "to right",
        type: linear
      ),
      radial: (
        legacy: "center, ellipse cover",
        standard: "ellipse at center",
        type: radial
      )
    );

    // Check if direction exists in direction map:
    @if map-has-key($direction-map, $direction) {
      // Fetch both the legacy and standards version for given direction
      $direction-legacy: map-get(map-get($direction-map, $direction), legacy);
      $direction-standard: map-get(map-get($direction-map, $direction), standard);

      // Fetch linear or radial
      $type: map-get(map-get($direction-map, $direction), type);

      $gradient-color-points: $startColor $startPoint, $endColor $endPoint !default;

      // Force horizontal to conform to brand 3 point gradient and vertical or
      // radial to a 2 point gradient.
      @if ($direction == "radial") {
        $gradient-color-points: $endColor $startPoint, $startColor $endPoint;
      }

      @else if ($direction == "horizontal") {
        $gradient-color-points: $startColor 0%, $endColor 50%, $startColor 100%;
      }

      background-color: $endColor; // Fallback for browsers lacking css gradient
      background-image: -webkit-#{$type}-gradient(#{$direction-legacy}, $gradient-color-points);
      background-image: -moz-#{$type}-gradient(#{$direction-legacy}, $gradient-color-points);
      background-image: -o-#{$type}-gradient(#{$direction-legacy}, $gradient-color-points);
      background-image: #{$type}-gradient(#{$direction-standard}, $gradient-color-points);
    }

    @else {
      @warn "#{$direction}` is not a valid direction, it must be vertical, horizontal or radial.";
    }
  }

  @else {
    @warn "Unknown `#{$key}` in $gradients.";
  }
}
