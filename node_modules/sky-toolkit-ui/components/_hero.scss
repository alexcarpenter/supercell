/* ==========================================================================
   COMPONENTS / #HERO
   ========================================================================== */

// Hero Settings
$hero-border-width: 5px;
$hero-border-color: rgba(color(white), 0.3);
$hero-text-shadow: 0 0 25px rgba(color(black), 0.25), 1px 1px 1px rgba(color(black), 0.5);
$hero-overlap: 10vh;

// Dependencies (Optional)
// =========================================== */

// "Hero" builds upon "Shine" for `.c-hero__shine`.
//
// If you want to utilise this feature, you must import
// `sky-toolkit-ui/components/shine` *before*
// `sky-toolkit-ui/components/hero` in your main scss file.
//
// If you are using `sky-toolkit-ui/all`, please ignore the above.

/* Base
  ============================================ */

/**
 * Hero
 *
 * The Hero component provides a dominant piece of media to a page.
 *
 * 1. Allows for absolute positioning of borders and content.
 * 2. Default height for stretched content, min-height for scaled/fixed content.
 * 3. Default text color, this should be customised with a modifier class.
 * 4. Hero images set via background-image should cover and center.
 */
.c-hero {
  position: relative; /* [1] */
  height: 60vh; /* [2] */
  min-height: 20em; /* [2] */
  color: color(white); /* [3] */
  background-position: center; /* [4] */
  background-size: cover; /* [4] */

  /**
   * Hero (Top & Bottom Border)
   *
   * Translucent top and bottom borders for the Hero.
   *
   * As we cannot set a border property over video, borders are implemented
   * using pseudo-elements.
   */
  &::before,
  &::after {
    content: "";
    position: absolute;
    display: block;
    left: 0;
    height: $hero-border-width;
    width: 100%;
    background: $hero-border-color;
  }

  /**
   * Hero (Top Border)
   */
  &::before {
    top: 0;
  }

  /**
   * Hero (Bottom Border)
   */
  &::after {
    bottom: 0;
  }
}

/**
 * Hero Caption
 *
 * The caption overlays at the bottom of a Hero, providing space for additional
 * content such as titles or logos.
 */
.c-hero__caption {
  position: absolute;
  bottom: 0;
  width: 100%;
  padding: $global-spacing-unit 0;
  text-shadow: $hero-text-shadow;
}

/**
 * Hero Link
 *
 * Hero link inherits the Hero `color` to override anchor element styles.
 */
.c-hero__link {
  color: inherit;
}

/**
 * Hero Shine
 *
 * To be applied directly to a `.c-shine` component, setting correct positioning
 * when used on a Hero.
 */
.c-hero__shine {
  position: absolute;
  right: 0;
  left: 0;
  z-index: 1;
}

.c-hero__shine--top {
  top: -($global-spacing-unit-small + $hero-border-width);
}

.c-hero__shine--bottom {
  bottom: -($global-spacing-unit-small + $hero-border-width);
}

/**
 * Hero Video
 *
 * Hero video needs to be set to `display: block` to avoid spacing issues.
 */
.c-hero__video {
  width: 100%;
  height: 100%;
  display: block;
}

/* Modifiers
  ============================================ */

/**
 * Hero - Borderless Top
 *
 * Hide the Hero's top border.
 */
.c-hero--borderless-top {
  &::before {
    background: transparent;
  }
}

/**
 * Hero - Borderless Bottom
 *
 * Hide the Hero's bottom border.
 */
.c-hero--borderless-bottom {
  &::after {
    background: transparent;
  }
}

/**
 * Hero - Cover
 *
 * Make the Hero cover all available screenspace
 */
.c-hero--cover {
  height: 100vh;
}

/**
 * Hero - Fit to Content
 *
 * Make the Hero automatically fit to its content height.
 * N.B. This should be used for videos.
 */
.c-hero--fit-content {
  height: auto;
  min-height: 0;
}

/**
 * Hero - Overlap
 *
 * Make any other content below the Hero overlap upwards.
 */
.c-hero--overlap {
  margin-bottom: -$hero-overlap;

  /**
   * Shift caption upwards to compensate for overlap.
   */
  .c-hero__caption {
    bottom: $hero-overlap;
  }
}
