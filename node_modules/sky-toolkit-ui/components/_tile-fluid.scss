/* ==========================================================================
   COMPONENTS / #TILE-FLUID
   ========================================================================== */

// Dependencies (Required)
// =========================================== */

// "Tile Fluid" builds upon "Tile" for `.c-tile--fluid`.
//
// To use this component, you must import
// `sky-toolkit-ui/components/tile` *before*
// `sky-toolkit-ui/components/tile-fluid` in your main scss file.
//
// If you are using `sky-toolkit-ui/all`, please ignore the above.

/**
 * Fluid tiles are designed to scale proportionally, this means the tile's
 * content scales in relation to its width.
 *
 * To achieve this we utilise viewport width units (vw) which allow us to scale
 * the tile relative to the browser, the downside being that we loose the
 * ability to accurately set exact font-sizes.
 *
 *
 * Fluid base breakpoint
 * ==============================================
 *
 * The fluid base breakpoint is the breakpoint used to base our proportional
 * scaling on. At this breakpoint our base font-size for tiles will be the vw
 * equivalent of our $global-font-size (20px).
 *
 */

$tile-fluid-base-breakpoint: map-get($mq-breakpoints, small) !default;

/* Tile Fluid base font size
 * ==============================================
 *
 * This calculates the vw equivalent of the $global-font-size at our specified
 * $tile-fluid-base-breakpoint value. It uses the following logic:
 *
 *  static font size / viewport width * 100vw
 *
 * This means that at our target browser width we will know that our fluid-base-
 * font-size is set to the vw equivalent of 20px (or what ever our global font
 * size is). Given our mobile first approach it makes sense this should be set
 * to our smallest breakpoint, this means we can be sure of the font-size at
 * this resolution.
 *
 */

$tile-fluid-base-font-size: (strip-unit($global-font-size / $tile-fluid-base-breakpoint)) * 100vw;

/* Tile Fluid max width
 * ==============================================
 *
 * To prevent the tiles scaling infinitely we can set a maximum size, by default
 * this is matched to .o-container (1200px).
 *
 */

$tile-fluid-max-width: $container-width !default;

/**
 * Now we have the fluid-base-font-size calculated we can apply this to the
 * `c-tile` via a modifier `--fluid`.
 */
.c-tile--fluid {
  font-size: $tile-fluid-base-font-size;

  /**
   * Now that our fluid tiles are set using the vw based font-size we can
   * automate scaling of content using em units which are relative to the tile
   * font-size. This removes the need to set bespoke vw sizes on all content.

   * Set generic fluid values for the tile:
   * 1. Convert the standard value for tile padding to em so it scales
   *    proportionally.
   */
  .c-tile__body {
    line-height: 1.2em;
    padding: convert-to-em($global-spacing-unit-small); /* [1] */
  }

  /**
   * Set generic fluid tile title values:
   * 1. Convert our heading charlie (36px) to an em value.
   * 2. Set margin bottom in em relative to the elements font-size (36px)
   */
  .c-tile__title {
    font-size: convert-to-em(text(heading-charlie)); /* [1] */
    line-height: 1.25em;
    margin-bottom: convert-to-em($global-spacing-unit-tiny, text(heading-charlie));  /* [2] */
  }
}

/* ==============================================
 * Tile Fluid Container
 * ==============================================
 */

/**
 * Tile Fluid constrain ratio
 * ==============================================
 * Once the browser goes beyond our standard container width (1200px) we want
 * the the fluid tiles to stop scaling so they maintain proportional to the tile
 * rather than the browser.
 *
 * To achieve this we need to find the px value which is equivalent to our vw
 * fluid font-size at 1200px. To do this we we can divide the container maximum
 * width by our fluid base breakpoint size.
 *
 */

$tile-fluid-constrain-ratio: $tile-fluid-max-width / $tile-fluid-base-breakpoint;

/**
 * This gives us the ratio between these two sizes. Now if we multiply our
 * global font size (20px) by this ratio we have the exact font-size of the
 * fluid tiles at 1200px.
 */

.c-tile-fluid-container .c-tile--fluid {
  @include mq($from: $tile-fluid-max-width) {
    font-size: $global-font-size * $tile-fluid-constrain-ratio;
  }
}

/* ==============================================
 * Tile Fluid Scaling
 * ==============================================
 *
 * Fluid tiles work based on browser width so when used in combination with the
 * toolkit grid we need to use modifiers to adjust the base font-size
 * accordingly. If we are using 1/2 width grid items then we can apply a
 * modifier to the reduce the fluid-base-font-size by half, maintaining the
 * tiles proportions.
 *
 * So:
 * .c-tile-fluid-scale-1/2         - Scales the fluid base font by 1/2
 * .c-tile-fluid-scale-1/3@medium  - Scales by 1/3 at the medium breakpoint and up
 * .c-tile-fluid-scale-1/1@large   - Resets scale full at the large breakpoint and up
 *
 * The tile-fluid-scales() mixin will generate these classes for each scale and
 * breakpoint provided.
 *
 */

@mixin tile-fluid-scales($scale-columns, $scale-breakpoint: null) {
  /**
   * Loop through the number of columns for each denominator of our fractions.
   */

  @each $scale-denominator in $scale-columns {
    /**
     * Begin creating a numerator for our fraction up until we hit the
     * denominator.
     */

    @for $scale-numerator from 1 through $scale-denominator {
      /**
       * Build a class in the format `.c-tile-fluid-scale-3/4[@<breakpoint>]`.
       */

      .c-tile-fluid-scale-#{$scale-numerator}\/#{$scale-denominator}#{$scale-breakpoint} .c-tile--fluid {
        font-size: $tile-fluid-base-font-size * ($scale-numerator / $scale-denominator);

        /**
         * For tiles wrapped in the container we set a fixed px font-size to
         * prevent scaling.
         */
        /* stylelint-disable max-nesting-depth */
        .c-tile-fluid-container & {
          @include mq($from: $tile-fluid-max-width) {
            font-size: ($global-font-size * $tile-fluid-constrain-ratio) * ($scale-numerator / $scale-denominator);
          }
        }
        /* stylelint-enable */
      }
    }
  }
}

/**
 * Create the fluid scale classes when no breakpoint is specified
 */
@include tile-fluid-scales(1 2 3 4 5);

/**
 * Create the fluid scale classes when a breakpoint is specified
 */
@each $alias, $bp in $mq-breakpoints {
  @include mq($from: $bp) {
    @include tile-fluid-scales(1 2 3 4 5, \@#{$alias});
  }
}
